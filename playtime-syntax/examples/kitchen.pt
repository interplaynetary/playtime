


(context kitchen
  (enactment
    (cleaner-1 wash-dishes)) ;; a single enacting expression

  ;; specify how an instance of a role should be chosen

  ;; default-selector any|next|first

  ;; library of role player selectors (import when writing the program)
  ;;   another <role>
  ;;   next    <role>
  ;;   first   <role>
  ;;   second  <role>
  ;;   third   <role>
  ;; the role player selector works over a list of actors that's
  ;; prefiltered based on actors meeting the requirements
  ;;
  ;; see also the comments here:
  ;; https://docs.google.com/document/d/1IcH1sWO4ktAR9RXuzX3wn0qUvW-pWqYgPenfQ_Uc_Ho/edit
  ;;

  (roles
    (cleaner
      (player-selector 'round-robin)
      (scripts 
        (wash-dishes
          ;; current cleaner
          ;; another cleaner
          (define offer-response (player respond accept wash-dishes?))
          (when (offer-response) ;; player accepts
            (define proof (player respond proof of dish completion))
            ;; basically goto, i.e. continue script at 'validator validate'
            (if (validator-1 validate proof) 
              (player add-points 4 dish-washing))))
        (cast-validator
          (define new-player (player respond cast validator))
          (cast validator new-player)))
      (requires (player 'has-cleaning-equipment)))
    ;; each role has its own player lookup
    (validator
      (scripts 
        (validate inputs
          (player respond validate inputs inputs))
        (cast-cleaner
          (define new-player (player respond cast cleaner))
          (cast cleaner new-player)))
      (requires (player 'is-competent)))))

;; define players as goblins actors
;;   they can receive messages using the actor message interface
;;   they generate a UI to display it to the user

;; what's passed as a player is most likely a revocable proxy for sending messages
;; â€” if you have a reference, you have the right

;; roles as classes
;; -


;; EXAMPLE CONTEXT INSTANTIATION

(enact kitchen ( ;; we can pass in roles in any order
  (cleaner (fronx alice charles vlad))  ;; this creates named cleaner instances cleaner-1, -2,...
  (validator (ruz brad))))

;; each player will be (cast <role> <player>)