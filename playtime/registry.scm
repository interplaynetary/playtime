(define-module (playtime registry)
  #:use-module (srfi srfi-13)
  #:use-module (goblins)
  #:use-module (goblins actor-lib methods)
  #:export (registry))

(define (hash-keys table)
  (hash-map->list (lambda (key value) key) table))

(define registry
  (let ((players (make-hash-table))
        (roles (make-hash-table))
        (role-players (make-hash-table)))
    (methods
      ((register-player symbol actor)
        (hash-set! players symbol actor))
      ((get-player symbol)
        (hash-ref players symbol #f))
      ((register-role symbol role)
        (hash-set! roles symbol role))
      ((get-role symbol)
        (hash-ref roles symbol #f))
      ((register-role-player role-symbol player-symbol)
        (hash-set! role-players role-symbol player-symbol))
      ((get-role-player role-symbol)
        (let ((existing-role-player (hash-ref role-players role-symbol #f)))
          (if existing-role-player
              existing-role-player
              (let* ((role-class (hash-ref roles role-symbol #f))
                     (player-symbol (hash-ref players (car (hash-keys players)) #f))
                     (player (hash-ref players player-symbol #f)))
                (if (and role-class player)
                    (let ((new-role-player (spawn role-class player)))
                      (hash-set! role-players role-symbol new-role-player)
                      new-role-player)
                    #f)))))
      ((roles) roles)
      ((players) players)
      ((role-players) role-players))))
